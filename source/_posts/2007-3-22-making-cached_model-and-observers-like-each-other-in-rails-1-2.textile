---
layout: post
title: Making cached_model and observers like each other in Rails 1.2
---
I recently updated my RubyGems to 0.9.2. In that upgrade, <code>require_gem</code> was deprecated in favor of <code>gem</code> and running Rails would generate a bunch of deprecation warnings. However, it was easy enough to fix by running <code>rake rails:update</code> in the app root.

Doing the update caused us some problems, though, because we are using the cached_model gem to store objects in memcached. cached_model was required in environment.rb before the <code>Rails::Initializer.run</code> block but with the new autoloading mechanism, it didn't work anymore because the Rails classes weren't at the disposal of cached_model before the initializer block. Instead I got all these weird errors:

<pre><code>$ script/console 
Loading development environment.
/opt/local/lib/ruby/gems/1.8/gems/cached_model-1.3.1/lib/cached_model.rb:21:NameError: uninitialized constant ActiveRecord
/opt/local/lib/ruby/gems/1.8/gems/actionpack-1.13.3/lib/action_controller/assertions/selector_assertions.rb:525:NoMethodError: undefined method `camelize' for "top":String
./script/../config/../config/../app/controllers/application.rb:1:NameError: uninitialized constant ActionController::Base
</code></pre>

Lo and behold, the cached_model docs instruct to put the require line after the initializer block. This is the right way and should be ok in most cases. However, in our app, we also have an observer for the <code>User</code> class, which is a subclass of <code>CachedModel</code>. Observers are loaded inside the initializer block (<code>config.active_record.observers = :user_observer</code>) and when loaded, they also initialize the actual ActiveRecord model they're observing (in this case <code>User</code>). But since <code>User</code> subclasses <code>CachedModel</code>, which is not loaded yet, we have a chicken and egg problem:

<pre><code>$ rake test:units
rake aborted!
uninitialized constant CachedModel
</code></pre>

We can't require cached_model before the initializer because <code>ActiveRecord::Base</code> doesn't exist then, and we can't require it after the initializer because it would need to be initialized when the observers are loaded. What's a man to do?

Rick Olson pointed me to a list of articles ("1":http://weblog.techno-weenie.net/2007/1/24/understanding-the-rails-initialization-process, "2":http://weblog.techno-weenie.net/2007/1/25/understanding-the-rails-initialization-process-part-2, "3":http://weblog.techno-weenie.net/2007/1/26/understanding-the-rails-plugin-initialization-process) that he recently wrote about the Rails initializing mechanism (+ a link to "another useful article by Tim Lucas":http://toolmantim.com/article/2006/12/27/environments_and_the_rails_initialisation_process).  This lead to a trick that solved my problem. Namely, writing a plugin.

The gist of the trick is that the loading of observers is deferred until all plugins are loaded. So I created an empty plugin called <code>cached_model_plugin</code>, put the <code>require 'cached_model'</code> line in its init.rb, and everything started working again. Woo-hoo!

The weird thing about this is that actually, the code in environment.rb after the <code>Rails::Initializer.run</code> block should _also_ be run before the observers are loaded. However, for whatever reason that didn't happen in our case, so I'm happy that using a dummy plugin helped.

With the new "config/initializers":http://dev.rubyonrails.org/changeset/6212 in Rails Edge this hack should become history, but until we update beyond 1.2.X, we'll be camping happily with my plugin.
